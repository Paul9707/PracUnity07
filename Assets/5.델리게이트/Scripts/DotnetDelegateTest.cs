using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DotnetDelegateTest : MonoBehaviour
{
    // Action 델리게이트: 
    // 기본적인 형태의 델리게이트를 Dotnet에서 기본적으로 정의하여 제공
    // 반환값이 없는 메서드를 참조할 수 있는 델리게이트
    Action action;

    // Action 델리게이트에 제네릭 타입은 파라미터 타입을 지정해주는 것이다. 
    // 따라서 제네릭으로 여러가지 타입에 델리게이트를 선언하는 것이 가능하다.
    // 제네릭의 갯수는 총 16개까지 가능하다.
    Action<int> actionWithIntParam;
    Action<float, float> actionWithTwoFloatParam;


    // Func 델리게이트:
    // 반환형이 있는 형태의 델리게이트를 Dotnet에서 기본적으로 정의하여 제공
    Func<object> func;

    // Func 델리게이트는 제네릭 타입 중 맨 뒤 반환형, 앞은 파라미터 타입 지정
    Func<string, int> parseFunc;

    // Predicate 델리게이트:
    // 반환형이 bool이고, 1개 이상의 파라미터가 있는 형태의 델리게이트
    Predicate<object> predicate;

    // Func<float, bool> 과 같은 형태임 

    private void Start()
    {
        action = SomeAction;
        actionWithIntParam = SomeActionWithPram;
        parseFunc = Parse;



        // Predicate 사용 이유
        List<int> intList = new List<int>();

        intList.Add(5);
        intList.Add(6);
        intList.Add(8);
        intList.Add(9);
        intList.Add(10);

        // int 리스트에서 짝수만 뽑아내는 방법
        List<int> evenList = intList.FindAll(IsEven);

        foreach (int i in evenList)
        {
            print(i);
        }

        // predicate의 경우, 일부 컬렉션 함수의 조건 판단을 위한 정의를
        // Bool을 리턴하는 함수의 형태로 받기 위해 활용됨.

        // 짝수를 FindAll 할때 무명 메서드를 사용할 경우 
        // 게임을 시작할때 한번만 가져와야 하는 경우 이렇게 사용하면 메모리를 아낄 수 있다.
        List<int> evenListByAnonymousMethod = intList.FindAll
            (
            delegate (int param)
            {
                return param % 2 == 0;
            }
            );
    }

    private void SomeAction() { }
    private void SomeActionWithPram(int a)
    {
        // a로 무언가를 한다고 치고 
    }

    private int Parse(string str)
    {
        return int.Parse(str);
    }

    private bool IsEven(int param)
    {
        return param % 2 == 0;
    }
}
